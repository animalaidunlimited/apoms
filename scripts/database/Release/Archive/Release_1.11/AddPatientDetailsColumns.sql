DROP PROCEDURE IF EXISTS `?`;
DELIMITER //
CREATE PROCEDURE `?`()
BEGIN
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END;
  ALTER TABLE AAU.Patient ADD `MainProblems` VARCHAR(256);
END //
DELIMITER ;
CALL `?`();
DROP PROCEDURE `?`;

DROP PROCEDURE IF EXISTS `?`;
DELIMITER //
CREATE PROCEDURE `?`()
BEGIN
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END;
  ALTER TABLE AAU.Patient ADD `Description` VARCHAR(256);
END //
DELIMITER ;
CALL `?`();
DROP PROCEDURE `?`;
	
DROP PROCEDURE IF EXISTS `?`;
DELIMITER //
CREATE PROCEDURE `?`()
BEGIN
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END;
  ALTER TABLE AAU.Patient ADD `Sex` INT;
END //
DELIMITER ;
CALL `?`();
DROP PROCEDURE `?`;				
              
DROP PROCEDURE IF EXISTS `?`;
DELIMITER //
CREATE PROCEDURE `?`()
BEGIN
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END;
  ALTER TABLE AAU.Patient ADD `TreatmentPriority` INT;
END //
DELIMITER ;
CALL `?`();
DROP PROCEDURE `?`;					
				
DROP PROCEDURE IF EXISTS `?`;
DELIMITER //
CREATE PROCEDURE `?`()
BEGIN
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END;
  ALTER TABLE AAU.Patient ADD `ABCStatus` INT;
END //
DELIMITER ;
CALL `?`();
DROP PROCEDURE `?`;	                
			
DROP PROCEDURE IF EXISTS `?`;
DELIMITER //
CREATE PROCEDURE `?`()
BEGIN
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END;
  ALTER TABLE AAU.Patient ADD `ReleaseStatus` INT;
END //
DELIMITER ;
CALL `?`();
DROP PROCEDURE `?`;	              
				

DROP PROCEDURE IF EXISTS `?`;
DELIMITER //
CREATE PROCEDURE `?`()
BEGIN
  DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN END;
  ALTER TABLE AAU.Patient ADD `Temperament` INT;
END //
DELIMITER ;
CALL `?`();
DROP PROCEDURE `?`;	                  
				